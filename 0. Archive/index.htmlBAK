<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Keystone FNC Tools</title>

		<!-- Main CSS -->
		<link href="css/default.css" rel="stylesheet">

		<!-- Bootstrap -->
		<link href="css/bootstrap.min.css" rel="stylesheet">
		
		<!-- Codemirror -->
		<link rel="stylesheet" href="apps/codemirror-4.4/lib/codemirror.css">
		<link rel="stylesheet" href="apps/codemirror-4.4/theme/twilight.css">

		<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
		<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
		<!--[if lt IE 9]>
		<script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
		<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
		<![endif]-->

		<!-- Codemirror -->
		<script src="apps/codemirror-4.4/lib/codemirror.js"></script>
		<script src="apps/codemirror-4.4/mode/javascript/javascript.js"></script>
		<script src="apps/codemirror-4.4/addon/edit/matchbrackets.js"></script>
		
		<!-- The other script links are at the bottom -->
		
	</head>
	
	<body>
		<div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
			<div class="container">
				<div class="navbar-header">
					<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
						<span class="sr-only">Toggle navigation</span>
						<!-- <span class="icon-bar"></span> -->
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
					<a class="navbar-brand" href="index.html">jTOOLS</a>
				</div>
				<div class="collapse navbar-collapse">
					<ul class="nav navbar-nav">
						<!-- <li class="active">
							<a href="index.html">Home</a>
						</li> -->
						<li>
							<a href="index.html">Keystone FNC</a>
						</li>
						<li>
							<a href="sevenDigitFnc.html">Keystone FNC (7-digit)</a>
						</li>
						<li>
							<a href="codeme.html">CodeMe</a>
						</li>
					</ul>
				</div>
			</div>
			
		</div> <!-- navbar navbar-inverse navbar-fixed-top -->
		
		
		<!-- <div class="container"> -->
		<div class="default">

			<div class="row">
				<div class="col-xs-12 col-md-6">
					<div class="panel panel-default">
						<div class="panel-heading"><h4 class="panel-title">Input (6 and 7-digit property IDs)</h4></div>
						
						<div class="panel-body">
							
							<form id="inputForm" action="">
								<div class="form-group">
									<textarea name="" id="textInput" rows="10"></textarea>
								</div>
								<p>Click on the FNC line text to see the results for that line.</p>
								
								<div class="btn-group btn-group-justified">
									<div class="btn-group">
									<button id="ptRow" type="button" class="btn btn-default">
												Turn ( to Rows
									</button>
									</div>
									<div class="btn-group">
									<button id="findAllPar" type="button" class="btn btn-default">
												Find All ()
									</button>
									</div>
								 	<div class="btn-group dropup">
										<button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
										    Add Sample Input <span class="caret"></span>
										</button>
										<ul class="dropdown-menu" role="menu">
											  	
										  	<li><span id="fncWoBrackets" type="button" class="btn">FNC without Brackets</span></li>
										    <li><span id="addSimple" type="button" class="btn">Simple FNC</span></li>
										    <li><span id="addComplex" type="button" class="btn">Complex FNC</span></li>
										    <li class="divider"></li>
										    <li><span id="clearText" type="button" class="btn">Clear</span></li>
										</ul>
									</div>
								</div>
							</form>
							
						</div><!--/. panel-body-->
					</div><!--/. panel panel-default-->

				</div><!--/.col-xs-12 col-md-9 -->

				<div class="col-xs-12 col-md-6">
					<div class="panel panel-default">
						<div class="panel-heading"><h4 class="panel-title">Results</h4></div>
						<div class="panel-body">
							<div class="form-group">
								<textarea name="" id="result" rows="10"></textarea>
							</div>
							
							
							<button id="copyLine" type="button" class="btn btn-default">
									Copy Line To Input
							</button>
						
						</div><!--/. panel-body-->
					</div><!--/. panel panel-default-->

					<div class="panel panel-default">
						
						<div class="panel-body">
						
						<div class="input-group">
							<span class="input-group-addon">(</span>
							<input type="text" id="countOpen" disabled class="form-control">
							<span class="input-group-addon">)</span>
							<input type="text" id="countClosed" disabled class="form-control">
							<span class="input-group-addon">Characters</span>
							<input type="text" id="count" disabled class="form-control">
							<span class="input-group-btn">
								<input type="button" id="findPar" value="Find $x" class="btn btn-primary">
							</span>
							<input type="text" id="inpFindPar" placeholder="eg. 10" class="form-control">
						</div>
						
							
						
						<textarea id="textResult" rows="5" cols="90" readonly="readonly" class="form-control"> </textarea>
						
						</div><!--/. panel-body-->
					</div><!--/. panel panel-default-->
				</div><!--/.col-xs-6 col-md-3 -->
				

			</div><!--/.row -->

		</div><!--/.default -->
		<!-- </div> --><!-- /.container -->

		
		<script>
			window.onload = init;
			function init() {
				var fp = document.getElementById("findPar");
				fp.onclick = findParentheses;
				
				var ptrow = document.getElementById("ptRow");
				ptrow.onclick = parToRow;
				
				var cpLine = document.getElementById("copyLine");
				cpLine.onclick = copyLine;
				
				var fncWoBrackets = document.getElementById("fncWoBrackets");
				fncWoBrackets.onclick = addFNCWoBrackets;
				
				var addSimple = document.getElementById("addSimple");
				addSimple.onclick = addSimpleInput;
				
				var addComplex = document.getElementById("addComplex");
				addComplex.onclick = addComplexInput;
				
				var clearText = document.getElementById("clearText");
				clearText.onclick = clearTextInput;
				
				
				var findAllPar = document.getElementById("findAllPar");
				findAllPar.onclick = findAllParentheses;
			}
		
		
			/*
			Codemirror Initialisation
			*/
			var editorST = CodeMirror.fromTextArea(document.getElementById("result"), {
				lineNumbers : true,
				mode : "text/javascript",
				lineWrapping : true,
				indentUnit : 4,
				theme: 'twilight',
				matchBrackets : true
			}); //theme: 'twilight',
			editorST.setSize("100%", "100%");

			var editorMT = CodeMirror.fromTextArea(document.getElementById("textInput"), {
				lineNumbers : true,
				mode : "text/javascript",
				lineWrapping : true,
				indentUnit : 4,
				theme: 'twilight',
				matchBrackets : true
			}); //theme: 'twilight',
			editorMT.setSize("100%", "510");
			editorMT.on('cursorActivity', function() { //'change'
				addSampleCode();
			});
			
			
			
			function addSampleCode() {
				_toSecText();
			}
			
			//used in addSampleCode()
			//([102366])-([567894])
			//[123456]-[567894]
			function _toSecText() {
				//Input
				var cursor = editorMT.getCursor();
				var inp = editorMT.getLine(cursor.line);
				
				//Result
				var res = _processLine(inp); //should return the text
				editorST.setValue(res);
			}
			
			//String line
			function _processLine(inp) {
				var resAddPar = addParenthesis(inp);
				resAddPar = addParenthesisSeven(resAddPar);
				
				var resAddExcl = addExclamation(inp);
				resAddExcl = addExclamationSeven(resAddExcl);
				
				//var resAddAssign = addAssignment(inp);
				if (inp.search(/\d{6}\]\=\$\d/gi) >= 0 || inp.search(/\d{7}\]\=\$\d/gi) >= 0) {
					var resAddAssign = inp;
				}
				else {
					var resAddAssign = addAssignment(inp);
					var resAddAssign = addAssignmentSeven(resAddAssign);
				}
				
				var res = "=== ADD BRACKETS ===\n" + resAddPar + "\n\n=== ADD EXCLAMATION ===\n" + resAddExcl + "\n\n=== ADD ASSIGNMENTS ===\n" + resAddAssign;
				
				//count
				var count = document.getElementById("count");
				count.value = resAddAssign.length;
				
				
				var matchOpen = resAddAssign.match(/\(/g);
				var countOpen = document.getElementById("countOpen");
				//countOpen.value = matchOpen.length;
				
				var matchClosed = resAddAssign.match(/\)/g);
				var countClosed = document.getElementById("countClosed");
				//countClosed.value = matchClosed.length;
				
				if(matchOpen && matchClosed) {
					countOpen.value = matchOpen.length;
					countClosed.value = matchClosed.length;
				}
				else {
					countOpen.value = 0;
					countClosed.value = 0;
				}
				
				//Result Text
				var resText = document.getElementById("textResult");
				resText.innerHTML = resAddAssign;
				
				return res;
				
				
				
			}
			
			function copyLine() {
				var cursor = editorST.getCursor();
				var inp = editorST.getLine(cursor.line);
				
				var inpMT = editorMT.getValue();

				editorMT.setValue(inpMT + "\n\n" + inp);
			}
			
			function addFNCWoBrackets() {
				var INPUT = "^[123456]-[234567]-[567894]\\.pdf$";
				var note = "\n\n\n" + "Note: Do not put a semicolon at the end of the file extension section. This will automatically do it for you if required." + "\n";
				editorMT.setValue(INPUT + note);
			}
			
			function addSimpleInput() {
				var SIMPLEINPUT = "^((([123456])-([234567]))|(([123456])))-([567894])|^(((([123456])-([234567]))|(([123456])))-([567894]))\.pdf$";
				
				var note = "\n\n\n" + "Note: You can ignore the \'ADD BRACKETS\' section if there are brackets in the input already." + "\n";
				
				editorMT.setValue(SIMPLEINPUT + note);
			}
			
			function addComplexInput() {
				var COMPLEXINPUT = "^(((([646118])-([646119])-((([646112])-([646085]))|(([646112])-([854793])-([865427])-([646085])(-([646092]))?)|(([646099])-([646112])-([646093])-([646092])-(([646095])|([865428])))))_([646102])\.(pdf|nwd|tbp|xsr)$)|((([646118])-([646119])-([646112])-([859160])-([854794])-([646093]))_([646102])(-([859159]))?\.(pdf|nwd|tbp|xsr)$)|((([646118])-([646119])-((([682689])-([646085]))|(([646099])-([682689])-([646093])-([646092])-([646095]))))_([646102])\.(zip)$)|((([646118])-([646119])-(((MP|MD)-([865427]))|((SD)-([854793])))-([646085]))_([646102])\.(pdf|nwd|tbp|xsr)$))";
				var note = "\n\n\n" + "Note: Do not put a semicolon at the end of the file extension section. This will automatically do it for you if required." + "\n";
				editorMT.setValue(COMPLEXINPUT + note);
			}
			
			function clearTextInput() {
				editorMT.setValue("");
				editorST.setValue("");
				document.getElementById("countOpen").value = 0;
				document.getElementById("countClosed").value = 0;
				document.getElementById("count").value = 0;
			}
			
			/*
			FNC Tools
			*/
			
			var pId = 6;
        	var propIdFormat = /\[\d{6}\]/;
        	var pIdSize = pId + 2;
			
			var newpId = 7;
			var newpropIdFormat = /\[\d{7}\]/;
			var newpIdSize = newpId + 2;
			
			function findAllParentheses() {
				var cursor = editorMT.getCursor();
				var inp = editorMT.getLine(cursor.line);
				var numOpen = 1;
				var m = 0;
				while (m < inp.length) {

					if(inp.charAt(m) == "(") {
						numOpen++;

					}
					m++;
				}

				editorST.setValue("");
				for(var i = 1; i < numOpen; i++) {
					var newTxt = _findParentheses(i, inp);
					if(editorST.getValue()) {
						editorST.setValue(editorST.getValue() + "\n" + newTxt);
					}
					else {
						editorST.setValue(newTxt);
					}
				}
				//alert(inp);
			}
			
			
			function _findParentheses(parToFind, inp) {
				//alert("findPar");
				//var inp = document.getElementById("textResult");

				var txt = inp.toString().trim();
				//var parToFind = document.getElementById("inpFindPar");
				//var ptf = parToFind.value;
				var ptf = parToFind;
				
				var indexCountOpen = 1;
				var indexOpen = 0;
				
				var numOpen = 1;
				var m = 0;
				while (m < txt.length) {

					if(txt.charAt(m) == "(") {
						numOpen++;

					}
					m++;
				}
				var newNumOpen = numOpen - 1;
				if(ptf >= numOpen) {
					alert("Value is greater than the number of brackets. The number of brackets is " + newNumOpen + ".");
				}
				else {
					var i=0;
					while (i < txt.length) {
						
						if (txt.charAt(i) == "(") {
							
							if(indexCountOpen == ptf) {
								indexOpen = i;
								break;
							}
							else {
								indexCountOpen++;
							}
						}
						else {
						}
						i++;
					}
					
					var indexClosed = 0;
					var brackCounter = 0;
					i++;
					while (i < txt.length) {
						//alert(brackCounter);
						if (txt.charAt(i) == ")") {
							if(brackCounter == 0) {
								indexClosed = i;
								break;
							}
							else {
								brackCounter--;
							}
							
						}
						else if (txt.charAt(i) == "("){
							brackCounter++;
						}
						i++;
						
					}

					var newTxt = txt.substring(indexOpen, indexClosed) + ")";
					return newTxt;
					//editorST.setValue(editorST.getValue() + "\n" + newTxt);
				}
			}
			
			
			function findParentheses() {
				//alert("findPar");
				var inp = document.getElementById("textResult");
				//var res = document.getElementById("result");
				
				var txt = inp.value.trim();
				var parToFind = document.getElementById("inpFindPar");
				var ptf = parToFind.value;
				
				var indexCountOpen = 1;
				var indexOpen = 0;
				
				var numOpen = 1;
				var m = 0;
				while (m < txt.length) {

					if(txt.charAt(m) == "(") {
						numOpen++;

					}
					m++;
				}
				
				//alert(ptf);
				
				var newNumOpen = numOpen - 1;
				if(ptf >= numOpen) {
					alert("Value is greater than the number of brackets. The number of brackets is " + newNumOpen + ".");
				}
				else {
					var i=0;
					while (i < txt.length) {
						
						if (txt.charAt(i) == "(") {
							
							if(indexCountOpen == ptf) {
								indexOpen = i;
								//alert(indexOpen);
								break;
							}
							else {
								indexCountOpen++;
							}
							
							//newTxt = newTxt + "\n" + txt.charAt(i);
							//&& indexCountOpen < parToFind.value
						}
						else {
							//newTxt = newTxt + txt.charAt(i);
							//newTxtHist = newTxtHist + i + ": " + txt.charAt(i);
						}
						i++;
						
						//alert(indexCountOpen);
					}
					//indexOpen = indexCountOpen;
					
					
					var indexClosed = 0;
					var brackCounter = 0;
					i++;
					while (i < txt.length) {
						//alert(brackCounter);
						if (txt.charAt(i) == ")") {
							if(brackCounter == 0) {
								indexClosed = i;
								break;
							}
							else {
								brackCounter--;
							}
							
						}
						else if (txt.charAt(i) == "("){
							brackCounter++;
						}
						i++;
						
					}
					
					
					var newTxt = txt.substring(indexOpen, indexClosed) + ")";
					//res.innerHTML = newTxt;
					//addToHistory("Bracket " + ptf + "\t:\t " + newTxt);
					
					editorST.setValue(newTxt);
					//addToHistory(newTxt);
					
					// var count = document.getElementById("count");
					// count.value = newTxt.length;
// 					
					// //count
					// var count = document.getElementById("count");
					// count.value = newTxt.length;
// 					
					// var matchOpen = newTxt.match(/\(/g);
					// var countOpen = document.getElementById("countOpen");
					// countOpen.value = matchOpen.length;
// 					
					// var matchClosed = newTxt.match(/\)/g);
					// var countClosed = document.getElementById("countClosed");
					// countClosed.value = matchClosed.length;
				}	
			}
			
			
			function addToHistory(text) {
				var li = document.createElement("li");
				li.innerHTML = text;
				
				var ul = document.getElementById("historyList");
				ul.appendChild(li);
			}
			
			function clear() {
				var res = document.getElementById("result");
				res.innerHTML = "";
				
				var hist = document.getElementById("historyList");
				hist.innerHTML = "";
				
				var count = document.getElementById("count");
				count.value = "";
				
				var countOpen = document.getElementById("countOpen");
				countOpen.value = "";
				
				var countClosed = document.getElementById("countClosed");
				countClosed.value = "";
			}
			
			function parToRow() {
				//alert("to Row");
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				//Input
				var cursor = editorMT.getCursor();
				var inp = editorMT.getLine(cursor.line);
				
				var txtToBeTrimmed = inp.toString().trim();
				var txt = "";
				if (txtToBeTrimmed.indexOf("(") != 0) {
					txt = txtToBeTrimmed.substring(txtToBeTrimmed.indexOf("("),txtToBeTrimmed.length);
					//alert(txt);
				}
				else {
					txt = txtToBeTrimmed;
				}
				
				var newTxt = "(";
				
				
				var i=1;
				while (i < txt.length) {

					if (txt.charAt(i) === "(") {
						newTxt = newTxt + "\n" + txt.charAt(i);
					}
					else {
						newTxt = newTxt + txt.charAt(i);
						//newTxtHist = newTxtHist + i + ": " + txt.charAt(i);
					}
					i++;
					
				}
				
				newTxt = newTxt.trim();
				//res.innerHTML = newTxt;
				editorST.setValue(newTxt);
				
				// //history
				// var newTxtHist = "1:\t(";
				// var k = 2;
				// var l = 1;
				// while (l < txt.length) {
// 
					// if (txt.charAt(l) === "(") {
						// newTxtHist = newTxtHist + "\n" + k + ":\t" + txt.charAt(l);
						// k++;
					// }
					// else {
						// newTxtHist = newTxtHist + txt.charAt(l);
						// //newTxtHist = newTxtHist + i + ": " + txt.charAt(i);
					// }
					// l++;
// 					
				// }
// 				
				// addToHistory("<pre>" + newTxtHist + "</pre>");
// 				
				// // var count = document.getElementById("count");
				// // count.value = newTxt.length;
// 				
// 				
				// //count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
			}
			
			function addAssignment(inp) {
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				var parArray = [];
				var charArray = [];
				
				var txt = inp.toString().trim();
				var txt = inp.toString().trim();
				if (txt.slice(-1) == ";") {
					txt = txt.substring(0, txt.length - 1);
				}

				var newTxt = "";
				var assignTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "(") {
						//alert("true");
						parArray.push(txt.charAt(i));
						
						if (txt.charAt(i+1) === "[") {
							
							//var propIdFormat = /\[\d{6}\]/;
							var subStr = txt.substring(i+1, i+pIdSize+1);

							if(propIdFormat.test(subStr)){

								charArray.push(subStr + "=$" + parArray.length);
								i = i+pIdSize+1;
								
							}
							else {
								//newTxt = newTxt + txt.charAt(i);
								i++;
							}
						}
						else {
							//newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						//newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}
				
				
				var newCharArray = [];
				for(var i=0; i<charArray.length; i++) {
					//assignTxt = assignTxt + charArray[i] + ";";
					if(i == 0) {
						newCharArray[0] = charArray[0];
					}
					else {
						var found = false;
						
						for (var j=0; j<newCharArray.length; j++) {
							var stri = charArray[i].toString().substring(0, pIdSize);
							var strj = newCharArray[j].toString().substring(0, pIdSize);
							
							if(stri === strj) {
								//add ||
								//alert(strj);
								var strn =  newCharArray[j] + "||" + charArray[i].toString().substring(pIdSize+1);
								newCharArray[j] = strn;
								found = true;
								break;
							}
						}
						
						
						if (found === false) {
							newCharArray.push(charArray[i]);
						}
						
					}
				}
				
				for(var i=0; i<newCharArray.length; i++) {
					assignTxt = assignTxt + newCharArray[i] + ";";
				}
				
				newTxt = txt + ";" + assignTxt;

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
				
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// //count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
				
			}
			
			function addAssignmentSeven(inp) {
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				var parArray = [];
				var charArray = [];
				
				var txt = inp.toString().trim();
				if (txt.slice(-1) == ";") {
					txt = txt.substring(0, txt.length - 1);
				}

				var newTxt = "";
				var assignTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "(") {
						//alert("true");
						parArray.push(txt.charAt(i));
						
						if (txt.charAt(i+1) === "[") {
							
							//var newpropIdFormat = /\[\d{6}\]/;
							var subStr = txt.substring(i+1, i+newpIdSize+1);

							if(newpropIdFormat.test(subStr)){

								charArray.push(subStr + "=$" + parArray.length);
								i = i+newpIdSize+1;
								
							}
							else {
								//newTxt = newTxt + txt.charAt(i);
								i++;
							}
						}
						else {
							//newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						//newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}
				
				
				var newCharArray = [];
				for(var i=0; i<charArray.length; i++) {
					//assignTxt = assignTxt + charArray[i] + ";";
					if(i == 0) {
						newCharArray[0] = charArray[0];
					}
					else {
						var found = false;
						
						for (var j=0; j<newCharArray.length; j++) {
							var stri = charArray[i].toString().substring(0, newpIdSize);
							var strj = newCharArray[j].toString().substring(0, newpIdSize);
							
							if(stri === strj) {
								//add ||
								//alert(strj);
								var strn =  newCharArray[j] + "||" + charArray[i].toString().substring(newpIdSize+1);
								newCharArray[j] = strn;
								found = true;
								break;
							}
						}
						
						
						if (found === false) {
							newCharArray.push(charArray[i]);
						}
						
					}
				}
				
				for(var i=0; i<newCharArray.length; i++) {
					assignTxt = assignTxt + newCharArray[i] + ";";
				}
				
				newTxt = txt + ";" + assignTxt;

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
				
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// //count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
				
			}
			
			
			function addParenthesis(inp) {
				//alert("alert");
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				//Input
				//var cursor = editorMT.getCursor();
				//var inp = editorMT.getLine(cursor.line);

				//var txt = inp.value.trim();
				var txt = inp.toString().trim();
				
				var newTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "[") {
						//var propIdFormat = /\[\d{6}\]/;
						var subStr = txt.substring(i, i+pIdSize);
						
						if(propIdFormat.test(subStr)){
							newTxt = newTxt + "(" + txt.substring(i, i+pIdSize) + ")";
							i = i+pIdSize;
						}
						else {
							newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
				//editorST.setValue(res);
				
				//count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
			}
			
			function addParenthesisSeven(inp) {
				//alert("alert");
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				//Input
				//var cursor = editorMT.getCursor();
				//var inp = editorMT.getLine(cursor.line);

				//var txt = inp.value.trim();
				var txt = inp.toString().trim();
				
				var newTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "[") {
						//var newpropIdFormat = /\[\d{6}\]/;
						var subStr = txt.substring(i, i+newpIdSize);
						
						if(newpropIdFormat.test(subStr)){
							newTxt = newTxt + "(" + txt.substring(i, i+newpIdSize) + ")";
							i = i+newpIdSize;
						}
						else {
							newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
				//editorST.setValue(res);
				
				//count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
			}
			
			
			function addExclamation(inp){
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				//var txt = inp.value.trim();
				var txt = inp.toString().trim();

				var newTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "[") {
						//var propIdFormat = /\[\d{6}\]/;
						var subStr = txt.substring(i, i+pIdSize);
						
						if(propIdFormat.test(subStr)){
							newTxt = newTxt + "[!" + txt.substring(i+1, i+pIdSize);
							i = i+pIdSize;
						}
						else {
							newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
// 				
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// //count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
			}
			
			function addExclamationSeven(inp){
				//var inp = document.getElementById("textInput");
				//var res = document.getElementById("result");
				
				//var txt = inp.value.trim();
				var txt = inp.toString().trim();

				var newTxt = "";
				
				var i=0;
				while (i < txt.length) {
					
					if (txt.charAt(i) === "[") {
						//var newpropIdFormat = /\[\d{6}\]/;
						var subStr = txt.substring(i, i+newpIdSize);
						
						if(newpropIdFormat.test(subStr)){
							newTxt = newTxt + "[!" + txt.substring(i+1, i+newpIdSize);
							i = i+newpIdSize;
						}
						else {
							newTxt = newTxt + txt.charAt(i);
							i++;
						}
						
					}
					else {
						newTxt = newTxt + txt.charAt(i);
						i++;
						
					}
				
				}

				//res.innerHTML = newTxt;
				//addToHistory(newTxt);
				
				//Result
				var res = newTxt; //should return the text
				return res;
// 				
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// //count
				// var count = document.getElementById("count");
				// count.value = newTxt.length;
// 				
				// var matchOpen = newTxt.match(/\(/g);
				// var countOpen = document.getElementById("countOpen");
				// countOpen.value = matchOpen.length;
// 				
				// var matchClosed = newTxt.match(/\)/g);
				// var countClosed = document.getElementById("countClosed");
				// countClosed.value = matchClosed.length;
			}
			
			
			
		</script>
		
		<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
		<script src="js/jquery-1.11.1.min.js"></script>
		
		<!-- Bootstrap -->
		<script src="js/bootstrap.min.js"></script>
		
		<script src="submitcontent.js"></script>

	</body>
</html>